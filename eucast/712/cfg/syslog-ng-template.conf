@version: 3.2
#
# Syslog-ng configuration file, compatible with default Debian syslogd
# installation. Originally written by anonymous (I can't find his name)
# Revised, and rewritten by me (SZALAY Attila <sasa@debian.org>)

# First, set some global options.
options { long_hostnames(off); flush_lines(1); use_dns(no); use_fqdn(no);
	  owner("root"); group("root"); perm(0644); stats_freq(0);
	  bad_hostname("^gconfd$");
          create_dirs(yes);
          keep_hostname(no);
};

########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src { unix-dgram("/dev/log"); internal();
       	     file("/proc/kmsg" program_override("kernel"));
};

source s_srcoam { udp(port(5000) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcrrc { udp(port(5001) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcrrm { udp(port(5002) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcson { udp(port(5003) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcl2 	{ udp(port(5006) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcradio  { udp(port(5007) so_rcvbuf(1048576) flags(no-parse)); };
source s_srctroam  { udp(port(5008) so_rcvbuf(1048576) flags(no-parse)); };
source s_srcsysoam { udp(port(5010) so_rcvbuf(1048576) flags(no-parse)); };
#s.RM#3105
source s_srctrace { udp(port(5011) so_rcvbuf(1048576) flags(no-parse)); };
#d.RM#3105


# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
#source s_net { tcp(ip(127.0.0.1) port(1000) authentication(required) encrypt(allow)); };
template t_samplelog_template {
	template("Message Received: BSDTAG => $BSDTAG, DATE => $DATE, DAY => $DAY, FACILITY => $FACILITY, FACILITY_NUM => $FACILITY_NUM, FULLDATE => $FULLDATE, FULLHOST => $FULLHOST, FULLHOST_FROM => $FULLHOST_FROM, HOUR => $HOUR, HOST => $HOST, HOST_FROM => $HOST_FROM, ISODATE => $ISODATE, LEVEL_NUM => $LEVEL_NUM, MIN => $MIN, MONTH => $MONTH, MONTH_ABBREV => $MONTH_ABBREV, MONTH_NAME => $MONTH_NAME, MONTH_WEEK => $MONTH_WEEK, MSG => $MSG, MSGHDR => $MSGHDR, MSGID => $MSGID, MSGONLY => $MSGONLY, PID => $PID, PRI => $PRI, PRIORITY => $PRIORITY, PROGRAM => $PROGRAM, SDATA => $SDATA, SEC => $SEC, SEQNUM => $SEQNUM, SOURCEIP => $SOURCEIP, STAMP => $STAMP, TAG => $TAG, TAGS => $TAGS, TZ => $TZ, TZOFFSET => $TZOFFSET, UNIXTIME => $UNIXTIME, YEAR => $YEAR, WEEK => $WEEK, WEEK_ABBREV => $WEEK_ABBREV, WEEK_DAY => $WEEK_DAY, WEEKDAY => $WEEKDAY, WEEK_DAY_NAME => $WEEK_DAY_NAME\n\n"); 
	template_escape(no); 
};
template t_log_template {
	template("$FULLDATE $PRIORITY : $MSGONLY\n\n"); 
	template_escape(no); 
};
template t_netlog_template {
	template("$MSGONLY\n"); 
	template_escape(no); 
};

########################
# Destinations
########################
# First some standard logfile
#
destination d_oam { file("OAM_LOG_FILE" template(t_netlog_template)); };
destination d_rrm { file("RRM_LOG_FILE" template(t_netlog_template)); };
destination d_rrmevents { file("RRM_LOG_PATH/rrm_events.txt" template(t_netlog_template)); };
destination d_rrc { file("RRC_LOG_FILE" template(t_netlog_template)); };
destination d_rrcevents { file("RRC_LOG_PATH/rrc_events.txt" template(t_netlog_template)); };
destination d_son { file("SON_LOG_FILE" template(t_netlog_template)); };
destination d_l2 { file("L2_LOG_FILE" template(t_netlog_template)); };
destination d_radio { file("RADIO_LOG_FILE" template(t_netlog_template)); };
destination d_ipsec { file("IPSEC_LOG_FILE");};
destination d_troam { file("TRANSPORT_LOG_FILE" template(t_netlog_template)); };
destination d_sysoam { file("OAMSYSTEM_LOG_FILE" template(t_netlog_template)); };
#s.RM#3105
destination d_trace { file("TRACE_LOG_FILE" template(t_netlog_template)); };
#e.RM#3105
destination d_auth { file("/var/log/auth.log"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_mail { file("/var/log/mail.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };

# These files are the logs coming from the mail subsystem.
#
destination d_mailinfo { file("/var/log/mail/mail.info"); };
destination d_mailwarn { file("/var/log/mail/mail.warn"); };
destination d_mailerr { file("/var/log/mail/mail.err"); };

# Logging for INN news system
#
destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

# Some `catch-all' logfiles.
#
destination d_debug { file("/var/log/debug"); };
destination d_error { file("/var/log/error"); };
destination d_messages { file("/var/log/messages"); };

# The root's console.
#
destination d_console { usertty("root"); };

# Virtual console.
#
destination d_console_all { file("/dev/tty10"); };

# The named pipe /dev/xconsole is for the nsole' utility.  To use it,
# you must invoke nsole' with the -file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
destination d_xconsole { pipe("/dev/xconsole"); };

# Send the messages to an other host
#
#destination d_net { tcp("127.0.0.1" port(1000) authentication(on) encrypt(on) log_fifo_size(1000)); };

# Debian only
destination d_ppp { file("/var/log/ppp.log"); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.
filter f_oam { program(Stack-OAM); };
filter f_rrm { program(eNodeB-RRM); };
filter f_rrmevent { program("EventId"); };
filter f_rrc { program(eNodeB-RRC); };
filter f_rrcevent { message("Protocol Event"); };
filter f_son { program(eNodeB-SON); };
filter f_radio { program(eNodeB-RADIO); };
filter f_ipsec { program(charon) or program(ipsec_starter);};
filter f_eNB { facility(local0) };
filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };

filter f_debug { level(debug) and not facility(auth, authpriv, daemon, news, mail,local0); };
filter f_error { level(err .. emerg) and not facility(local0); };
filter f_messages { level(info,notice,warn) and
                    not facility(auth,authpriv,cron,daemon,mail,news,local0); };

filter f_auth { facility(auth, authpriv) and not filter(f_debug) and not filter(f_ipsec);};
filter f_cron { facility(cron) and not filter(f_debug); };
filter f_daemon { facility(daemon) and not filter(f_debug) and not filter(f_ipsec);};
filter f_kern { facility(kern) and not filter(f_debug); };
filter f_lpr { facility(lpr) and not filter(f_debug); };
filter f_local { facility(local0, local1, local3, local4, local5,
                        local6, local7) and not filter(f_debug); };
filter f_mail { facility(mail) and not filter(f_debug); };
filter f_news { facility(news) and not filter(f_debug); };
filter f_syslog3 { not facility(auth, authpriv, mail,local0) and not filter(f_debug); };
filter f_user { facility(user) and not filter(f_debug); };
filter f_uucp { facility(uucp) and not filter(f_debug); };

filter f_cnews { level(notice, err, crit) and facility(news); };
filter f_cother { level(debug, info, notice, warn) or facility(daemon, mail); };

filter f_ppp { facility(local2) and not filter(f_debug); };
filter f_console { level(warn .. emerg); };

########################
# Log paths
########################
log { source(s_srcoam); destination(d_oam); };
log { source(s_srcrrc); destination(d_rrc); };
log { source(s_srcrrm); destination(d_rrm); };
log { source(s_srcson); destination(d_son); };
log { source(s_srcl2); destination(d_l2); };
log { source(s_srcradio); destination(d_radio); };
log { source(s_srctroam); destination(d_troam); };
log { source(s_srcsysoam); destination(d_sysoam); };
#s.RM#3105
log { source(s_srctrace); destination(d_trace); };
#e.RM#3105
log { source(s_src); filter(f_eNB);
      log { filter(f_oam); destination(d_oam); };
      log { filter(f_rrm); destination(d_rrm); };
      log { filter(f_rrc); destination(d_rrc); };
      log { filter(f_son); destination(d_son); };
      log { filter(f_radio); destination(d_radio); };
      log { filter(f_rrcevent); destination(d_rrcevents); };
      log { filter(f_rrmevent); destination(d_rrmevents); };
};
log { source(s_src); filter(f_auth); destination(d_auth); };
log { source(s_src); filter(f_ipsec); destination(d_ipsec); };
log { source(s_src); filter(f_cron); destination(d_cron); };
log { source(s_src); filter(f_daemon); destination(d_daemon); };
log { source(s_src); filter(f_kern); destination(d_kern); };
log { source(s_src); filter(f_lpr); destination(d_lpr); };
log { source(s_src); filter(f_syslog3); destination(d_syslog); };
log { source(s_src); filter(f_user); destination(d_user); };
log { source(s_src); filter(f_uucp); destination(d_uucp); };

log { source(s_src); filter(f_mail); destination(d_mail); };
#log { source(s_src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
#log { source(s_src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
#log { source(s_src); filter(f_mail); filter(f_err); destination(d_mailerr); };

log { source(s_src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(s_src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(s_src); filter(f_news); filter(f_notice); destination(d_newsnotice); };
#log { source(s_src); filter(f_cnews); destination(d_console_all); };
#log { source(s_src); filter(f_cother); destination(d_console_all); };

#log { source(s_src); filter(f_ppp); destination(d_ppp); };

log { source(s_src); filter(f_debug); destination(d_debug); };
log { source(s_src); filter(f_error); destination(d_error); };
log { source(s_src); filter(f_messages); destination(d_messages); };

log { source(s_src); filter(f_console); destination(d_console_all);
				    destination(d_xconsole); };
log { source(s_src); filter(f_crit); destination(d_console); };

# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };

