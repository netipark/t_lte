# Syslog-ng configuration file, compatible with default Debian syslogd
# installation. Originally written by anonymous (I can't find his name)
# Revised, and rewritten by me (SZALAY Attila <sasa@debian.org>)

# First, set some global options.
options { long_hostnames(off); flush_lines(200); use_dns(no); use_fqdn(no);
	  owner("root"); group("adm"); perm(0640); stats_freq(0);
	  bad_hostname("^gconfd$");
          create_dirs(yes);
          keep_hostname(no);
};

########################
# Sources
########################
# This is the default behavior of sysklogd package
# Logs may come from unix stream, but not from another machine.
#
source s_src { unix-dgram("/dev/log"); internal();
       	     file("/proc/kmsg" program_override("kernel"));
};

source s_srcoam { udp(port(5000) so_rcvbuf(1048576)); };
source s_srcrrc { udp(port(5001) so_rcvbuf(1048576)); };
source s_srcrrm { udp(port(5002) so_rcvbuf(1048576)); };
source s_srcson { udp(port(5003) so_rcvbuf(1048576)); };
source s_srcl2 	{ udp(port(5006) so_rcvbuf(1048576)); };
source s_srcradio { udp(port(5007) so_rcvbuf(1048576)); };
source s_srctroam { udp(port(5008) so_rcvbuf(1048576)); };

# If you wish to get logs from remote machine you should uncomment
# this and comment the above source line.
#
#source s_net { tcp(ip(127.0.0.1) port(1000) authentication(required) encrypt(allow)); };
template t_samplelog_template {
	template("Message Received: BSDTAG => $BSDTAG, DATE => $DATE, DAY => $DAY, FACILITY => $FACILITY, FACILITY_NUM => $FACILITY_NUM, FULLDATE => $FULLDATE, FULLHOST => $FULLHOST, FULLHOST_FROM => $FULLHOST_FROM, HOUR => $HOUR, HOST => $HOST, HOST_FROM => $HOST_FROM, ISODATE => $ISODATE, LEVEL_NUM => $LEVEL_NUM, MIN => $MIN, MONTH => $MONTH, MONTH_ABBREV => $MONTH_ABBREV, MONTH_NAME => $MONTH_NAME, MONTH_WEEK => $MONTH_WEEK, MSG => $MSG, MSGHDR => $MSGHDR, MSGID => $MSGID, MSGONLY => $MSGONLY, PID => $PID, PRI => $PRI, PRIORITY => $PRIORITY, PROGRAM => $PROGRAM, SDATA => $SDATA, SEC => $SEC, SEQNUM => $SEQNUM, SOURCEIP => $SOURCEIP, STAMP => $STAMP, TAG => $TAG, TAGS => $TAGS, TZ => $TZ, TZOFFSET => $TZOFFSET, UNIXTIME => $UNIXTIME, YEAR => $YEAR, WEEK => $WEEK, WEEK_ABBREV => $WEEK_ABBREV, WEEK_DAY => $WEEK_DAY, WEEKDAY => $WEEKDAY, WEEK_DAY_NAME => $WEEK_DAY_NAME\n\n"); 
	template_escape(no); 
};
template t_log_template {
	template("$FULLDATE $PRIORITY : $MSGONLY\n\n"); 
	template_escape(no); 
};
template t_netlog_template {
	template("$MSGONLY\n"); 
	template_escape(no); 
};

########################
# Destinations
########################
# First some standard logfile
#
destination d_oam { file("OAM_LOG_FILE" template(t_netlog_template)); };
destination d_rrm { file("RRM_LOG_FILE" template(t_netlog_template)); };
destination d_rrmevents { file("RRM_LOG_PATH/rrm_events.txt" template(t_netlog_template)); };
destination d_rrc { file("RRC_LOG_FILE" template(t_netlog_template)); };
destination d_rrcevents { file("RRC_LOG_PATH/rrc_events.txt" template(t_netlog_template)); };
destination d_son { file("SON_LOG_FILE" template(t_netlog_template)); };
destination d_l2 { file("L2_LOG_FILE" template(t_netlog_template)); };
destination d_radio { file("RADIO_LOG_FILE" template(t_netlog_template)); };
destination d_ipsec { file("IPSEC_LOG_FILE");};
destination d_troam { file("TRANSPORT_LOG_FILE" template(t_netlog_template)); };

########################
# Filters
########################
# Here's come the filter options. With this rules, we can set which 
# message go where.
filter f_oam { program(Stack-OAM); };
filter f_rrm { program(eNodeB-RRM); };
filter f_rrmevent { program("EventId"); };
filter f_rrc { program(eNodeB-RRC); };
filter f_rrcevent { message("Protocol Event"); };
filter f_son { program(eNodeB-SON); };
filter f_radio { program(eNodeB-RADIO); };
filter f_ipsec { program(charon) or program(ipsec_starter);};
filter f_auth { facility(auth, authpriv) and not filter(f_debug) and not filter(f_ipsec); };    
filter f_daemon { facility(daemon) and not filter(f_debug) and not filter(f_ipsec); };

filter f_eNB { facility(local0) };
filter f_dbg { level(debug); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_err { level(err); };
filter f_crit { level(crit .. emerg); };



########################
# Log paths
########################
log { source(s_srcoam); destination(d_oam); };
log { source(s_srcrrc); destination(d_rrc); };
log { source(s_srcrrm); destination(d_rrm); };
log { source(s_srcson); destination(d_son); };
log { source(s_srcl2); destination(d_l2); };
log { source(s_srcradio); destination(d_radio); };
log { source(s_srctroam); destination(d_troam); };
log { source(s_src); filter(f_ipsec); destination(d_ipsec); };   
log { source(s_src); filter(f_eNB);
      log { filter(f_oam); destination(d_oam); };
      log { filter(f_rrm); destination(d_rrm); };
      log { filter(f_rrc); destination(d_rrc); };
      log { filter(f_son); destination(d_son); };
      log { filter(f_radio); destination(d_radio); };
      log { filter(f_rrcevent); destination(d_rrcevents); };
      log { filter(f_rrmevent); destination(d_rrmevents); };
};


# All messages send to a remote site
#
#log { source(s_src); destination(d_net); };

